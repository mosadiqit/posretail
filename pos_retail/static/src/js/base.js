odoo.define('pos_retail.base', function (require) {
    var models = require('point_of_sale.models');
    var _super_posmodel = models.PosModel.prototype;

    _super_posmodel.push_and_invoice_order = function (order) {
        var self = this;
        var invoiced = new $.Deferred();

        if (!order.get_client()) {
            invoiced.reject({code: 400, message: 'Missing Customer', data: {}});
            return invoiced;
        }

        var order_id = this.db.add_order(order.export_as_JSON());

        this.flush_mutex.exec(function () {
            var done = new $.Deferred(); // holds the mutex

            // send the order to the server
            // we have a 30 seconds timeout on this push.
            // FIXME: if the server takes more than 30 seconds to accept the order,
            // the client will believe it wasn't successfully sent, and very bad
            // things will happen as a duplicate will be sent next time
            // so we must make sure the server detects and ignores duplicated orders

            var transfer = self._flush_orders([self.db.get_order(order_id)], {timeout: 30000, to_invoice: true});

            transfer.fail(function (error) {
                invoiced.reject(error);
                done.reject();
            });

            // on success, get the order id generated by the server
            //----------------------------------------
            // bruce.nguyen customize
            //----------------------------------------
            if (!self.config.invoice_offline) {
                transfer.pipe(function (order_server_id) {

                    // generate the pdf and download it
                    self.chrome.do_action('point_of_sale.pos_invoice_report', {
                        additional_context: {
                            active_ids: order_server_id,
                        }
                    }).done(function () {
                        invoiced.resolve();
                        done.resolve();
                    });
                });
            } else {
                invoiced.resolve();
                done.resolve();
            }
            return done;

        });

        return invoiced;
    }
});
